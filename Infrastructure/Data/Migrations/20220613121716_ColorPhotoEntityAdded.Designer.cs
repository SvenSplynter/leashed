// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20220613121716_ColorPhotoEntityAdded")]
    partial class ColorPhotoEntityAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("Core.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("Core.Entities.ColorPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int?>("StockMaterialId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("StockMaterialId");

                    b.ToTable("ColorPhoto");
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HardwareColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HardwareMaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HardwareTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InStock")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Ordered")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Size")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HardwareColorId");

                    b.HasIndex("HardwareMaterialId");

                    b.HasIndex("HardwareTypeId");

                    b.ToTable("Hardwares");
                });

            modelBuilder.Entity("Core.Entities.HardwareColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HardwareColors");
                });

            modelBuilder.Entity("Core.Entities.HardwareMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HardwareMaterials");
                });

            modelBuilder.Entity("Core.Entities.HardwareType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("HardwareTypes");
                });

            modelBuilder.Entity("Core.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColorId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("PricePerMeter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Thickness")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("MaterialTypeId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Core.Entities.MaterialType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MaterialTypes");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsMain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EndCapsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishMaterial1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishMaterial2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinishMaterial3Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Finishing")
                        .HasColumnType("TEXT");

                    b.Property<int>("Hook1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hook2Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("InStock")
                        .HasColumnType("INTEGER");

                    b.Property<int>("KeychainId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastUpdated")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<double>("Length")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("ORing1Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ORing2Id")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductTypeId")
                        .HasMaxLength(100)
                        .HasColumnType("INTEGER");

                    b.Property<int>("StopBarId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EndCapsId");

                    b.HasIndex("FinishMaterial1Id");

                    b.HasIndex("FinishMaterial2Id");

                    b.HasIndex("FinishMaterial3Id");

                    b.HasIndex("Hook1Id");

                    b.HasIndex("Hook2Id");

                    b.HasIndex("KeychainId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("ORing1Id");

                    b.HasIndex("ORing2Id");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("StopBarId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Core.Entities.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("Core.Entities.StockMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaterialId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeterInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.ToTable("StockMaterials");
                });

            modelBuilder.Entity("Core.Entities.ColorPhoto", b =>
                {
                    b.HasOne("Core.Entities.Color", "Color")
                        .WithMany("Photos")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Material", null)
                        .WithMany("photos")
                        .HasForeignKey("MaterialId");

                    b.HasOne("Core.Entities.StockMaterial", null)
                        .WithMany("photos")
                        .HasForeignKey("StockMaterialId");

                    b.Navigation("Color");
                });

            modelBuilder.Entity("Core.Entities.Hardware", b =>
                {
                    b.HasOne("Core.Entities.HardwareColor", "HardwareColor")
                        .WithMany()
                        .HasForeignKey("HardwareColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HardwareMaterial", "HardwareMaterial")
                        .WithMany()
                        .HasForeignKey("HardwareMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.HardwareType", "HardwareType")
                        .WithMany()
                        .HasForeignKey("HardwareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HardwareColor");

                    b.Navigation("HardwareMaterial");

                    b.Navigation("HardwareType");
                });

            modelBuilder.Entity("Core.Entities.Material", b =>
                {
                    b.HasOne("Core.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.MaterialType", "MaterialType")
                        .WithMany()
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("MaterialType");
                });

            modelBuilder.Entity("Core.Entities.Photo", b =>
                {
                    b.HasOne("Core.Entities.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.HasOne("Core.Entities.Hardware", "EndCaps")
                        .WithMany()
                        .HasForeignKey("EndCapsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Material", "FinishMaterial1")
                        .WithMany()
                        .HasForeignKey("FinishMaterial1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Material", "FinishMaterial2")
                        .WithMany()
                        .HasForeignKey("FinishMaterial2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Material", "FinishMaterial3")
                        .WithMany()
                        .HasForeignKey("FinishMaterial3Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "Hook1")
                        .WithMany()
                        .HasForeignKey("Hook1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "Hook2")
                        .WithMany()
                        .HasForeignKey("Hook2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "Keychain")
                        .WithMany()
                        .HasForeignKey("KeychainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "ORing1")
                        .WithMany()
                        .HasForeignKey("ORing1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "ORing2")
                        .WithMany()
                        .HasForeignKey("ORing2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Hardware", "StopBar")
                        .WithMany()
                        .HasForeignKey("StopBarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EndCaps");

                    b.Navigation("FinishMaterial1");

                    b.Navigation("FinishMaterial2");

                    b.Navigation("FinishMaterial3");

                    b.Navigation("Hook1");

                    b.Navigation("Hook2");

                    b.Navigation("Keychain");

                    b.Navigation("Material");

                    b.Navigation("ORing1");

                    b.Navigation("ORing2");

                    b.Navigation("ProductType");

                    b.Navigation("StopBar");
                });

            modelBuilder.Entity("Core.Entities.StockMaterial", b =>
                {
                    b.HasOne("Core.Entities.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Core.Entities.Color", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Core.Entities.Material", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("Core.Entities.Product", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Core.Entities.StockMaterial", b =>
                {
                    b.Navigation("photos");
                });
#pragma warning restore 612, 618
        }
    }
}
